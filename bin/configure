#!/usr/bin/env bash
# Install packages and copy configs
# Auto mode does these things:
# - Installs core packages
# - Links configs

SCRIPT_DIR="$(dirname $0)"
LOCAL_BIN="$HOME/.local/bin"

# Should core packages be auto-installed?
AUTO=0
if [[ "$@" == *"--auto"* ]]; then
	AUTO=1
fi

# yes_or_no "prompt"
# return 0 if no
# return 1 if yes
function yes_or_no {
	while true; do
		read -p "$* [y/n]: " yn
		case $yn in
			[Yy]*) return 0 ;;
			[Nn]*) return 1 ;;
		esac
	done
}

# pull_repo https://github.com/author/reponame ~/containing/dir
function pull_repo {
	link="$1"
	containingdir="$2"
	repo=$(basename "$link")
	if [ ! -d "$containingdir/$repo" ]; then
		git clone "$link" "$containingdir/$repo" 
	else
		echo "Already pulled $repo"
	fi
	cd "$containingdir/$repo"
	echo "Pulling $repo..."
	git pull
}

# Ensure sudo is installed
if ! command -v sudo &> /dev/null; then
	echo "sudo must be installed for this script to work"
	echo "You may want to edit user groups with usermod -aG sudo <user>"
	echo "After modifying groups, log out and log back in for changes to take effect"
	exit 1
fi

# Make sure ~/.local/bin exists
mkdir -p $LOCAL_BIN

# Perform full system upgrade and install programs
if [[ AUTO -eq 1 ]] || yes_or_no "Install core packages?"; then
	sudo apt-get update -y
	sudo apt-get upgrade -y
	sudo apt-get install -y \
		neovim \
		curl \
		wget \
		gcc \
		bc \
		lua5.4 \
		python3 \
		entr \
		man-db \
		git \
		gh \
		nnn \
		tmux \
		stow \
		fzf \
		tree \
		zip \
		unzip \
		rsync \
		ntfs-3g \
		jmtpfs \
		htop \
		jq \
		tar \
		gzip \
		gron \
		gnupg \
		zoxide \
		oathtool \
		openresolv \
		wireguard-tools \
		xdg-user-dirs \
		pkg-config
fi

# Copy configs now
if [[ AUTO -eq 1 ]] || yes_or_no "Link configs now?"; then
	bash "$SCRIPT_DIR/stowdots"
fi

# Optionally configure neovim
if [[ AUTO -eq 0 ]] && yes_or_no "Add neovim?"; then
	# Install neovim from source
	cd /tmp/
	wget https://github.com/neovim/neovim/releases/download/v0.9.5/nvim.appimage
	chmod +x nvim.appimage
	mv nvim.appimage $LOCAL_BIN/nvim

	# Only copy packer if it hasn't been initialized yet
	if [ ! -d ~/.local/share/nvim/site/pack/packer/start/packer.nvim ]; then
		git clone --depth 1 https://github.com/wbthomason/packer.nvim \
			~/.local/share/nvim/site/pack/packer/start/packer.nvim
	fi

	# Install ripgrep for telescope
	sudo apt-get install -y ripgrep

	# Run neovim with packersync command
	$LOCAL_BIN/nvim -c "PackerSync"
fi

# Install battery programs
if [[ AUTO -eq 0 ]] && yes_or_no "Install battery programs?"; then
	sudo apt-get install -y \
		upower \
		tlp
	sudo systemctl enable tlp.service --now
fi

# Install desktop environment
if [[ AUTO -eq 0 ]] && yes_or_no "Configure desktop?"; then
	if yes_or_no "Install packages for sway?"; then
		sudo apt-get install -y \
			sway \
			swaybg \
			swayidle \
			swaylock \
			light \
			wtype \
			grim \
			slurp \
			dunst \
			waybar \
			bemenu \
			upower \
			gammastep \
			alsa-utils \
			pipewire-audio \
			network-manager \
			wl-clipboard \
			libnotify-bin \
			xdg-utils \
			xdg-desktop-portal-wlr
		systemctl --user --now enable pipewire pipewire-pulse
	fi

	# Install fonts
	if yes_or_no "Install fonts?"; then
		sudo apt-get install -y \
			fonts-hack \
			fonts-freefont-ttf \
			fonts-noto \
			fonts-noto-color-emoji \
			fonts-noto-cjk
	fi

	# Install generic desktop programs
	if yes_or_no "Install generic desktop applications?"; then
		sudo apt-get install -y \
			alacritty \
			mpv \
			imv \
			zathura \
			zathura-pdf-poppler
		ln -s $(which alacritty) $LOCAL_BIN/xterm &>/dev/null
	fi

	# Install GTK desktop packages
	if yes_or_no "Install GTK desktop applications?"; then
		sudo apt-get install -y \
			nemo \
			l3afpad \
			galculator \
			pavucontrol \
			xdg-desktop-portal-gtk
	fi

	# Set default programs with xdg-mime
	# * doesn't work for mimetype so I give extensions as well
	# * only sets applications if corresponding default is installed
	if yes_or_no "Set default programs?"; then
		# nvim for text files
		if [ -f /usr/share/applications/nvim.desktop ]; then
			xdg-mime default nvim.desktop \
				application/octet-stream application/json text/plain text/*
		fi
		# zathura for pdf
		if [ -f /usr/share/applications/org.pwmt.zathura.desktop ]; then
			xdg-mime default org.pwmt.zathura.desktop \
				application/pdf applicaiton/epub application/epub+zip
		fi
		# imv for images
		if [ -f /usr/share/applications/imv.desktop ]; then
			xdg-mime default imv.desktop \
				image/png image/jpg image/jpeg image/gif image/webp image/bmp image/*
		fi
		# mpv for videos
		if [ -f /usr/share/applications/mpv.desktop ]; then
			xdg-mime default mpv.desktop \
				video/mkv video/mp4 video/avi video/webm video/* audio/mp3 audio/flac audio/*
		fi
		# firefox for browser links
		if [ -f /usr/share/applications/firefox.desktop ]; then
			xdg-mime default firefox.desktop \
				x-scheme-handler/https x-scheme-handler/http text/html
		fi
		# nemo for files
		if [ -f /usr/share/applications/nemo.desktop ]; then
			xdg-mime default nemo.desktop \
				inode/directory
		fi
		# For nemo "open in terminal" functionality
		if command -v alacritty &>/dev/null; then
			gsettings set org.cinnamon.desktop.default-applications.terminal exec 'alacritty'
			gsettings set org.cinnamon.desktop.default-applications.terminal exec-arg "-e"
		fi
	fi

	# Optionally download themes
	if yes_or_no "Download themes?"; then
		echo "Making directories"
		mkdir --parents ~/.icons
		mkdir --parents ~/.themes
		
		echo "Downloading themes"
		cd /tmp/
		wget https://github.com/constellationz/gruvbox-material-gtk/releases/download/latest/Gruvbox-Material-Dark.tar.gz
		tar -xvf Gruvbox-Material-Dark.tar.gz
		cp -r Gruvbox-Material-Dark ~/.themes/
		yes | rm -r Gruvbox-Material-Dark.tar.gz &>/dev/null

		echo "Pulling sources"
		pull_repo https://github.com/constellationz/gruvbox-icons ~/.rep
		pull_repo https://github.com/constellationz/simp1e-gruvbox-dark ~/.rep
		pull_repo https://github.com/PapirusDevelopmentTeam/papirus-icon-theme ~/.rep

		echo "Linking themes"
		rsync --recursive --links ~/.rep/gruvbox-icons/ \
			~/.icons/Gruvbox-Icons/
		rsync --recursive --links ~/.rep/simp1e-gruvbox-dark/ \
			~/.icons/Simp1e-Gruvbox-Dark/
		rsync --recursive --links ~/.rep/papirus-icon-theme/Papirus-Dark/ \
			~/.icons/Papirus-Dark/

		# After downloading themes, optionally set themes
		if yes_or_no "Set themes & fonts via gsettings?"; then
			echo "Updating theme with gsettings"
			gsettings set org.gnome.desktop.interface gtk-theme 'Gruvbox-Material-Dark'
			gsettings set org.gnome.desktop.interface icon-theme 'Gruvbox-Icons'
			gsettings set org.gnome.desktop.interface cursor-theme 'Simp1e-Gruvbox-Dark'
			gsettings set org.gnome.desktop.interface font-name 'FreeSans 11'
			gsettings set org.gnome.desktop.interface document-font-name 'FreeSans 11'
			gsettings set org.gnome.desktop.interface monospace-font-name 'Hack 11'
			gsettings set org.gnome.desktop.wm.preferences button-layout ""

		fi

		# Optionally set flatpak themes
		if command -v flatpak && yes_or_no "Set themes in flatpak?"; then
			gtk_theme=$(gsettings get org.gnome.desktop.interface gtk-theme | sed "s/'//g")
			icon_theme=$(gsettings get org.gnome.desktop.interface icon-theme | sed "s/'//g")
			sudo flatpak override --env=GTK_THEME=$gtk_theme \
				--env=ICON_THEME=$icon_theme \
				--filesystem=~/.config \
				--filesystem=~/.icons \
				--filesystem=~/.themes
		fi
	fi
fi
