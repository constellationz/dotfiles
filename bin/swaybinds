#!/usr/bin/env python3
# Output a json containing bind information

import sys
import glob
import re
from typing import Text
import json
import os


def readFile(filePath):
    try:
        paths = glob.glob(filePath)
    except (Exception, IndexError):
        print("couldn't resolve glob:", filePath)
        paths = []

    allLines: list[str] = []
    for path in paths:
        allLines = allLines + open(path, "r").readlines()

    finalLines: list[str] = []
    for line in allLines:
        if re.search(r'^include\s+(.+?)$', line):
            nextPath = re.findall(r'^include\s+(.+?)$', line)[0]
            finalLines = finalLines + readFile(nextPath)
        else:
            finalLines = finalLines + [line]

    return finalLines


def findKeybindingForLine(lineNumber: int, lines: list[str]):
    return lines[lineNumber + 1].split(' ')[1]


class DocsConfig:
    action: Text
    keybinding: Text


def getDocsConfig(lines: list[str]):
    docsLineRegex = r"^##! (?P<action>.+?)\s*(- (?P<keybinding>.+?))*\n"
    docsConfig: list[DocsConfig] = []
    for index, line in enumerate(lines):
        match = re.match(docsLineRegex, line)
        if match:
            config = DocsConfig()
            config.action = match.group('action')
            config.keybinding = match.group('keybinding')
            if config.keybinding is None:
                config.keybinding = findKeybindingForLine(index, lines)
            docsConfig = docsConfig + [config]
    return docsConfig


def getSymbolDict(lines: list[str]):
    setRegex = r"^set\s+(?P<variable>\$.+?)\s(?P<value>.+)?"
    dictionary = {}
    for line in lines:
        match = re.match(setRegex, line)
        if match:
            if match.group('variable'):
                dictionary[match.group('variable')] = match.group('value')
    return dict(dictionary)


translations = {
    'Mod1': "Alt",
    'Mod2': "Num",
    'Mod3': "Caps",
    'Mod4': "Mod",
    'Mod5': "Scroll",
    'question': "?",
    'space': "␣",
    'minus': "-",
    'plus': '+',
    'Return': "Enter",
    'XF86AudioRaiseVolume': "VolUp",
    'XF86AudioLowerVolume': "VolDown",
    'XF86AudioMute': "Mute",
    'XF86AudioMicMute': "MicMute",
    'XF86MonBrightnessUp': "BacklightDown",
    'XF86MonBrightnessDown': "BacklightUp",
    'XF86PowerOff': "Power",
    'XF86TouchpadToggle': "TouchpadOn"
}


def translate(word: Text, dictionary: dict):
    try:
        return dictionary[word.strip()]
    except KeyError:
        return word.strip()


def replaceBindingFromMap(binding: Text, dictionary: dict):
    elements = binding.split('+')
    resultElements = []
    for el in elements:
        translation = translate(translate(el, dictionary), translations)
        resultElements = resultElements + [translation]

    return " + ".join(resultElements)


def sanitize(configs: list[DocsConfig], symbolDict: dict):
    for index, config in enumerate(configs):
        config.keybinding = replaceBindingFromMap(
            config.keybinding, symbolDict)
        configs[index] = config
    return configs


def getDocsList(lines: list[str]):
    docsConfig = getDocsConfig(lines)
    symbolDict = getSymbolDict(lines)
    sanitizedConfig = sanitize(docsConfig, symbolDict)
    return sanitizedConfig

# Read config file
HOME = os.environ['HOME']
bindsfile = f'{HOME}/.config/sway/binds'
if len(sys.argv) >= 2:
    rootPath = sys.argv[1]
elif os.path.exists(bindsfile):
    rootPath = bindsfile
else:
    rootPath = '/etc/sway/config'


# Generate json from config
lines = readFile(rootPath)
docsList = getDocsList(lines)
result = []
for config in docsList:
    result = result + [{'action': config.action, 'keybinding': config.keybinding}]
print(json.dumps(result))
